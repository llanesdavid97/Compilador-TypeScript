using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Management;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Compilador_JavaScript
{
    public class Sintactico
    {
        public List<Error> listaError;
        List<Token> listaTokens; // Copia lista tokens original
        private int[] listaSintactico = new int[200]; // AS LIFO
        public bool error = false; // Bandera de errores
        bool revision = false; // Bandera para decidir si analizar o salir 

        /// <summary>
        /// Punteros de las lista tokens y AS
        /// </summary>
        int punteroLexico = 0;
        int punteroSintactico = 1;

        int intentosRecuperar;
        TipoRecuperacion tipoRecuperacion;

        enum TipoRecuperacion
        {
            Ninguna,
            Falta,
            Sobra,
            Diferentes,
            Urgencia,
            NoMas
        }

      

        #region MATRIZ SINTACTICA II
        public int[,] MatrizSintactica = new int[,]
    {
         //                   -1      -2      -3     -4       -6        -7      -8         -9     -10     -12       -13       -14      -15      -16     -17        -18     -19     -30    -31     -32      -33      -34       -35    -36    -45     -46     -47    -48     -49     -50    -51      -59      -60      -61       -62     -63      -64     -65     -66     -67     -68    -69      -70     -71      -72     -73        -74      -76     -77       -78         -79       -84        -85          -86          -87       -88     -89       -90        -91        -92       -93        -94     -95      -96       -98      -99      -100     -101    -102    -103    -104    -105      -106    -107    -108    -109    -110     -111     -112     -113     -114    -115     -116     -117      -118      -119     -120      -121    -200     
//                            0        1       2      3        4        5        6         7       8       9         10       11       12       13       14        15      16      17     18      19       20       21        22     23      24      25      26     27      28     29      30       31       32       33       34      35       36      37      38      39      40      41       42      43       44      45         46      47       48         49         50         51        52           53           54       55       56        57         58         59        60         61      62       63        64       65       66       67      68      69      70      71        72      73       74      75      76      77       78       79       80      81       82       83        84         85       86       87      88
        //                |   ID   |  INT  |  DEC |  CAD  |     +    |   -    |   *     |   /   |   %   |   ++   |    --    |   =   |   +=    |   -=   |  *=    |   /=   |  %=   |   &&  |  ||  |   !   | typeof |instanceof|   &  |   |  |  ==   |  !=   |   >   |   <   |  >=  |  <=  |    ?   |   var   |  let  |  const  |   (   |    )  |   {   |    }   |   [   |   ]  |   ;    |   :    |  ,   |   .  |   string | number | boolean | static | public | private | protected |  void  | interface | constructor | abstract | class  | extends | function | prototype | length |  get     |  set   |  if   |  else   | switch |  case   | break | default |  for  |  in  |  while |  do  | continue | return | this | super |  new  |  try  |  catch |  finally | throw | true  |  false |  null  | undefined | import | console |  log  |   $  |
                           
/*0*/            /*s*/     {-600 ,   -600 ,  -600 , -600,   -600 ,     -600 ,   -600 ,   -600 ,   -600,    -600   ,  -600 ,    -600 ,  -600,    -600,    -601,    -600  ,  -600 ,  -600,   -600 ,  -600 ,  -600 ,   -600 ,   -600,   -600 , -600,   -600 ,  -600 ,  -600 , -600 ,  -600 ,  -600 ,   -600,    -600 ,   -600 ,   -600 ,  -600 ,  -600,   -600 ,  -600,   -600 ,  -600 ,   -600 ,   -600 ,  -600,    -600 ,   -600,   -600 ,       1,       1,       1,        1,      -600 ,       -600,         -600 ,      -600 ,      1  ,    -600 ,    -600,       -600 ,      -600,    -600 ,   -600 ,   -600 ,   -600 ,    -600,    -600 ,   -600,   -600 ,   -600 ,  -600 ,   -600 ,  -600,   -600 ,     -600,    -600 ,  -600 ,  -600 ,  -600 , -600,      -600 ,    -600,  -600 ,   -600 ,   -600 ,   -600 ,        1,     600,      600,    600}, //1
/*1*/        /*programa*/  {-600 ,   -600 ,  -600 , -600,   -600 ,     -600 ,   -600 ,   -600 ,   -600,    -600   ,  -600 ,    -600,   -600,    -600,    -601 ,   -600  ,  -600 ,  -600,   -600 ,  -600 ,  -600 ,   -600 ,   -600,   -600 , -600,   -600 ,  -600 ,  -600 , -600 ,  -600 ,  -600 ,   -600,    -600 ,   -600 ,   -600 ,  -600 ,  -600,   -600 ,  -600,   -600 ,  -600 ,   -600 ,   -600 ,  -600,    -600 ,   -600,   -600 ,       2,       2 ,      2,        2,      -600 ,       -600,         -600 ,      -600 ,      2 ,     -600 ,    -600,       -600 ,      -600,    -600 ,   -600 ,   -600 ,   -600 ,    -600,    -600 ,   -600,   -600 ,   -600 ,  -600 ,   -600 ,  -600,   -600 ,     -600,    -600 ,  -600 ,  -600 ,  -600 , -600,      -600 ,    -600,  -600 ,   -600 ,   -600 ,   -600 ,        2,     600,      600,    600},  //2
/*2*/       /*librerías*/  {-600 ,   -600 ,  -600 , -600,   -600 ,     -600 ,   -600 ,   -600 ,   -600,    -600   ,  -600 ,    -600,   -601,    -601,    -601,    -600  ,  -600 ,  -600,   -600 ,  -600 ,  -600 ,   -600 ,   -600,   -600 , -600,   -600 ,  -600 ,  -600 , -600 ,  -600 ,  -600 ,   -600,    -600 ,   -600 ,   -600 ,  -600 ,  -600,   -600 ,  -600,   -600 ,  -600 ,   -600 ,   -600 ,  -600,    -600 ,   -600,   -600 ,       4,       4,       4,        4 ,      -600 ,      -600,         -600 ,      -600 ,      4 ,     -600 ,    -600,       -600 ,      -600,    -600 ,   -600 ,   -600 ,   -600 ,    -600,    -600 ,   -600,   -600 ,   -600 ,  -600 ,   -600 ,  -600,   -600 ,     -600,    -600 ,  -600 ,  -600 ,  -600 , -600,      -600 ,    -600,  -600 ,   -600 ,   -600 ,   -600 ,        3,     600,      600,    600},  // 3 
/*3*/            /*lib */  {-601 ,   -601 ,  -601 , -601,   -601 ,     -601 ,   -601 ,   -601 ,  -601,     -601  ,   -600 ,    -601,   -601 ,   -601,    -601 ,   -601  ,  -600 ,  -600,   -600 ,  -600 ,  -600 ,   -600 ,   -600,   -600 , -600,   -600 ,  -600 ,  -600 , -600 ,  -600 ,  -600 ,   -600,    -600 ,   -600 ,   -600 ,  -600 ,  -600,   -600 ,  -600,   -600 ,  -600 ,   -600 ,   -600 ,  -600,    -600 ,   -600,   -600 ,    -601,    -602 ,   -602,      -602,      -600 ,      -600,         -600 ,      -600 ,    -601,     -600 ,    -600,       -600 ,      -600,    -600 ,   -600 ,   -600 ,   -600 ,    -600,    -600 ,   -600,   -600 ,   -600 ,  -600 ,   -600 ,  -600,   -600 ,     -600,    -600 ,  -600 ,  -600 ,  -600 , -600,      -600 ,    -600,  -600 ,   -600 ,   -600 ,   -600 ,        5,     600,      600,    600},  //4
/*4*/         /*clases */  {-600 ,   -600 , -600 , -600,    -600 ,     -600 ,   -600 ,   -600 ,   -600,    -600   ,  -600 ,    -601 ,  -601,    -601,    -600,    -600  ,  -600 ,  -600,   -600 ,  -600 ,  -600 ,   -600 ,   -600,   -600 , -600,   -600 ,  -600 ,  -600 , -600 ,  -600 ,  -600 ,   -600,    -600 ,   -600 ,   -600 ,  -600 ,  -600,   -600 ,  -600,   -600 ,  -600 ,   -600 ,   -600 ,  -600,    -600 ,   -600,   -600 ,       8,      8,        8,         9,      -600 ,      -600,         -600 ,      -600 ,       8 ,    -600 ,    -600,       -600 ,      -600,    -600 ,   -600 ,   -600 ,   -600 ,    -600,    -600 ,   -600,   -600 ,   -600 ,  -600 ,   -600 ,  -600,   -600 ,     -600,    -600 ,  -600 ,  -600 ,  -600 , -600,      -600 ,    -600,  -600 ,   -600 ,   -600 ,   -600 ,      -604,    600,      600,    600},  //5
/*5*/         /*lib1*/     { 7   ,   -601 , -601 ,  6,      -601 ,     -601 ,   -601 ,   -601 ,   -601,    -601   ,  -601 ,    -601,   -601,    -601,    -601 ,   -601  ,  -600 ,  -600,   -600 ,  -600 ,  -600 ,   -600 ,   -600,   -600 , -600,   -600 ,  -600 ,  -600 , -600 ,  -600 ,  -600 ,   -600,    -600 ,   -600 ,   -600 ,  -600 ,  -600,   -600 ,  -600,   -600 ,  -600 ,   -600 ,   -600 ,  -600,    -600 ,   -600,   -600 ,    -601,   -601 ,    -601,        11,      -600 ,      -600,         -600 ,      -600 ,    -601,     -600 ,    -600,       -600 ,      -600,    -600 ,   -600 ,   -600 ,   -600 ,    -600,    -600 ,   -600,   -600 ,   -600 ,  -600 ,   -600 ,  -600,   -600 ,     -600,    -600 ,  -600 ,  -600 ,  -600 , -600,      -600 ,    -600,  -600 ,   -600 ,   -600 ,   -600 ,        5,     600,      600,    600},  //6
/*6*/         /*clases1  */{-604 ,   -604 , -604 , -600,    -604 ,     -604 ,   -604 ,   -604 ,   -604,    -600   ,  -604,    -601,    -601 ,   -601,    -601  ,  -601  ,  -600 ,  -600,   -600 ,  -600 ,  -600 ,   -600 ,   -600,   -600 , -600,   -600 ,  -600 ,  -600 , -600 ,  -600 ,  -600 ,   -600,    -600 ,   -600 ,   -600 ,  -600 ,  -600,   -600 ,  -600,   -600 ,  -600 ,   -600 ,   -600 ,  -600,    -600 ,   -600,   -600 ,       9,      9,        9,      -600 ,     -600 ,      -600,         -600 ,      -600 ,       9,     -600 ,    -600,       -600 ,      -600,    -600 ,   -600 ,   -600 ,   -600 ,    -600,    -600 ,   -600,   -600 ,   -600 ,  -600 ,   -600 ,  -600,   -600 ,     -600,    -600 ,  -600 ,  -600 ,  -600 , -600,      -600 ,    -600,  -600 ,   -600 ,   -600 ,   -600 ,      -604,     600,      600,     10},  //7
/*7*/         /*Clase*/    {-604 ,   -604 , -604 , -600,    -604 ,     -604 ,   -604 ,   -604 ,   -604,    -604   ,  -604,    -601 ,   -601,    -600,    -601,    -604  ,  -600 ,  -600,   -600 ,  -600 ,  -600 ,   -600 ,   -600,   -600 , -600,   -600 ,  -600 ,  -600 , -600 ,  -600 ,  -600 ,   -600,    -600 ,   -600 ,   -600 ,  -600 ,  -600,   -600 ,  -600,   -600 ,  -600 ,   -600 ,   -600 ,  -600,    -600 ,   -600,   -600 ,      11,      11 ,      11 ,      11,      -600 ,      -600,         -600 ,      -600 ,      11,     -600 ,    -600,       -600 ,      -600,    -600 ,   -600 ,   -600 ,   -600 ,    -600,    -600 ,   -600,   -600 ,   -600 ,  -600 ,   -600 ,  -600,   -600 ,     -600,    -600 ,  -600 ,  -600 ,  -600 , -600,      -600 ,    -600,  -600 ,   -600 ,   -600 ,   -600 ,      -600,    600,      600,    600}, //8
/*8*/         /*herencia*/ {-602 ,   -602 , -602 , -600,    -602 ,     -602 ,   -602  ,  -602   , -602,    -605   ,  -602,    -602,    -602 ,   -602,    -602,    -602  ,  -600 ,  -600,   -600 ,  -600 ,  -600 ,   -600 ,   -600,   -600 , -600,   -600 ,  -600 ,  -600 , -600 ,  -600,   -600 ,   -600,    -600 ,   -600 ,   -600 ,  -600 ,    12,   -600 ,  -600,   -600 ,  -600 ,   -600 ,   -600 ,  -600,    -600 ,   -600,   -600 ,    -601,    -603,     -603,     -603,      -600 ,      -600,         -600 ,      -600 ,    -601,       13 ,    -600,       -600 ,      -600,    -600 ,   -600 ,   -600 ,   -600 ,    -600,    -600 ,   -600,   -600 ,   -600 ,  -600 ,   -600 ,  -600,   -600 ,     -600,    -600 ,  -600 ,  -600 ,  -600 , -600,      -600 ,    -600,  -600 ,   -600 ,   -600 ,   -600 ,         5,    600,      600,    600},  //9
/*9*/        /*Acceso */   {14 ,     -605 , -605 , -600,    -605 ,     -605 ,   -605 ,   -605 ,   -605,    -605   ,  -605,    -605,    -605,    -605 ,   -605,    -605  ,  -600 ,  -600,   -600 ,  -600 ,  -600 ,   -600 ,   -600,   -600 , -600,   -600 ,   -600 ,  -600 , -600 ,  -600 ,  -600 ,   -600,    -600 ,   -600 ,   -600 ,  -600 ,  -600,   -600 ,  -600,   -600 ,  -600 ,   -600 ,   -600 ,  -600,    -600 ,   -600,   -600 ,      17,      15,       16,       18,      -600 ,      -600,         -600 ,      -600 ,     14 ,     -600 ,    -600,       -600 ,      -600,    -600 ,   -600 ,   -600 ,   -600 ,    -600,    -600 ,   -600,   -600 ,   -600 ,  -600 ,   -600 ,  -600,   -600 ,     -600,    -600 ,  -600 ,  -600 ,  -600 , -600,      -600 ,    -600,  -600 ,   -600 ,   -600 ,   -600 ,     -600,     600,      600,    600},  //10
/*10*/       /*miembros*/  {19  ,    -603 , -603 , -600,    -603 ,     -603 ,   -603 ,   -603 ,   -603,    -605  ,   -603,    -603,   -603 ,   -603,    -603,    -603  ,  -600 ,  -600,   -600 ,  -600 ,  -600 ,   -600 ,   -600,   -600 , -600,   -600 ,    -600 ,  -600 , -600 ,  -600,   -600 ,   -600,    -600 ,   -600 ,   -600 ,  -600 ,  -600,    19  ,  -600,   -600 ,  -600 ,   -600 ,   -600 ,  -600,    -600 ,   -600,   -600 ,     19,      19,       19,       19,      -600 ,      -600,         -600 ,      -600 ,    -603,     -600 ,    -600,       -600 ,      -600,    -600 ,   -600 ,   -600 ,   -600 ,    -600,    -600 ,   -600,   -600 ,   -600 ,  -600 ,   -600 ,  -600,   -600 ,     -600,    -600 ,  -600 ,  -600 ,  -600 , -600,      -600 ,    -600,  -600 ,   -600 ,   -600 ,   -600 ,     -600,     600,      600,    600}  //11
/*11*/       /* Miembro */// {-603,    -603,  -603,  -603,    -603,      -603,    -603,    -603,    -603,    -603,     -603,    -603,   -603 ,   -603,    -603,    -603,    -603,    -603,   -603,   -603,   -603,     -603,   -603,   -603,   -603,  -603,   -603,    -603,  -603,   -603,   -603,    -603,     -603,   -603,    -603,   -603,   -603,   -603,   -603,   -603,   -603,    -603,   -603,    -603,    -603,    -603,   -603,     -603,    -603,     -603     -603,      -603,       -603,         -603,       -603,      -603,    -603,     -603,        -603,      -603,     -603,    -603,    -603,    -603,    -603,     -603,   -603,   -603      -603,  -603,    -603,   -603,    -603,     -603,    -603,   -603,   -603,   -603,  -603,      -603,      -603,  -603,   -603,     -603,   -603,       -603,    -603,     -603,   -603}
/*12*/       /*param *    { },
/*13*/       /*parametro { },
/*14*/     /*parametro1  { },
/*15 */     /* metatrip  { },
/*16*/     /*metatripcon1{ },
/*17*/    /*retorno      { },
/*18*/    /*tipo        { },
/*19*/   /* sentencias  { },
/*20*/  /* Sentencia    { },
/*21*/  /* if            { },
/*22*/   /*condiconal    { },
/*23*/ /* Factor_condl  { },
/*24*/  /*op_rel         { },
/*25*/ /*termino_cond    { },
/*26*/ /*OP LOG          { },
/*27*/  /* ELSE          { },
/*28*/  /* ELSE_1        { },
/*29 */ /* FOR           { },
/*30*/  /*METAFOR        { },
        
             */
     };
        #endregion
        // -201 = LAMBDA
        // -200 = $

        #region  REPOSITORIO DE REGLAS
        public int[,] RepositorioReglas = new int[,]
        {
                /* s */     {1001, -200, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0},      //1
          /*script     */   {1004, 1002, -200, 0, 0, 0, 0, 0, 0,0,0,0,0,0},   //2

            /*librerias*/   {1002, 1003, -200, 0, 0, 0, 0, 0, 0,0,0,0,0,0},   //3 
            /*librerias*/   {-201,  -200 , -0, 0, 0, 0, 0, 0, 0,0,0,0,0,0},    //4
            /*Lib */        {1005, -119, -200, 0, 0, 0, 0, 0, 0,0,0,0,0,0},    //5 
             /* Lib1 */     {-68, -4, -200, 0, 0, 0, 0, 0, 0,0,0,0,0,0},      //6
            /* Lib1 */      {-68, -1, -200, 0, 0, 0, 0,0,0,0,0,0,0,0},        //7

            /*Clases*/      {1006, 1007, -200, 0, 0, 0, 0, 0, 0,0,0,0,0,0},   //8
            /*Clases1*/     {1006, 1007, -200, 0, 0, 0, 0, 0, 0,0,0,0,0,0},   //9
            /*Clases1*/     {-201, -200, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0},       //10
            /*Clase*/       {-65, 1010, -64, 1008, -1, -88, 1009, -200, 0,0,0,0,0,0}, //11

            /*Herencia*/    {-201, -200, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0},    //12
            /*Herencia*/    {-1, -89, -200, 0, 0, 0, 0, 0, 0,0,0,0,0,0},    //13

            /*Alcance*/     {-201, -200, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0},     //14
            /*Alcance*/     {-77, -200, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0},     //15
            /*Alcance*/     {-78, -200, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0},     //16
            /*Alcance*/     {-79, -200, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0},     //17
            /*Alcance*/     {-76, -200, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0},     //18

            /*Miembros*/    {-201, -200, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0},    // 19 // lambda
            /*Miembro */    {1010, 1011,-200, 0, 0, 0, 0, 0, 0,0,0,0,0,0},    // 20
            /*miembro*/     {1015,  -200, 0, 0, 0, 0, 0, 0, 0 ,0,0,0,0,0}, // 21

            /*PARAM**/      {-201, -200, 0, 0, 0, 0, 0, 0, 0 ,0,0,0,0,0 }, //22
            /*PARAM*/       {-63, 1013, -62, -201, 0, 0, 0, 0, 0,0,0,0,0,0 }, //23
            /*PARAMETRO */  {1014, 1018, -68,-1,-200,0, 0,0,0,0,0,0,0,0 },  //24
            /*PARAMETRO 1*/ {-201,200, 0, 0, 0, 0, 0, 0, 0 ,0,0,0,0,0 },    //25
            /*PARAMTRO 1 */ {1014, 1018, -1, -70, 200, 0,0,0,0,0,0,0,0,0 },  //26

            /*metatripcon*/ {1016, -1, 1009, -200, 0, 0, 0, 0, 0,0,0,0,0,0}, //27
            /*meta1*/       {-65, 1017, 1019, -64, 1018, 69, 1012, -200, 0,0,0,0,0,0  }, //28
            /* meta1*/      {-68, 1043, 0, 0, 0, 0, 0, 0, 0 ,0,0,0,0,0 }, //29
            /*meta1*/       {-201, -200,0, 0, 0, 0, 0, 0, 0 ,0,0,0,0,0 },  //30

            /*retorno*/     {-68, 1036, -107, -200,0 ,0 ,0,0 ,0,0,0,0,0,0}, //31
            /*retorno*/     {-201, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0 }, //32

            /*tipo*/        {-72, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0},  //33
            /*tipo*/        {-73, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0},  //34
            /*tipo*/        {-74, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0},  //35
            /*tipo*/        {-75, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0},  //36

            /*sentencias*/   {1020,1019,-200,0,0,0,0,0 ,0 ,0,0,0,0,0}, //37
            /*sentencias*/   {-201,-200,0,0,0,0,0,0 ,0 ,0,0,0,0,0}, //38
            /*sentencia*/    {1021,-200,0,0,0,0,0,0 ,0 ,0,0,0,0,0}, //39
            /*sentencia*/    
            /*sentencia*/   {1027,-200,0,0,0,0,0,0 ,0 ,0,0,0,0,0}, //40
                            {1023,-200,0,0,0,0,0,0 ,0 ,0,0,0,0,0}, //40
            /*sentencia*/   {1034,-200,0,0,0,0,0,0,0 ,0,0,0,0,0 }, //41
            /*sentencia*/   {1035,-200,0,0,0,0,0,0 ,0,0,0,0,0,0}, //42

            /*if*/          {1027, -65, 1019, -64,-63,1022, -62, -95,-200,0,0,0,0,0 }, //43
            /*condi*/       {1025,1023,-200,0,0,0,0,0,0 ,0,0,0,0,0}, //44

            /*factorCond*/  {-115, -200,0,0,0,0,0,0 ,0 ,0,0,0,0,0}, //45
            /*factorCond*/  {-116, -200,0,0,0,0,0,0 ,0 ,0,0,0,0,0}, //46
            /*factorCond*/  {1040, 1024, 1040,0,0,0,0,0 ,0 ,0,0,0,0,0}, //47

         /*opCondioconal*/  {-47, -200,0,0,0,0,0,0 ,0 ,0,0,0,0,0}, //48
         /*opCondioconal*/  {-48, -200,0,0,0,0,0,0 ,0 ,0,0,0,0,0}, //49
        /*opCondioconal*/   {-49, -200,0,0,0,0,0,0 ,0,0,0,0,0,0 }, //50
        /*opCondioconal*/   {-50, -200,0,0,0,0,0,0 ,0 ,0,0,0,0,0}, //51
       /*opCondioconal*/    {-45, -200,0,0,0,0,0,0 ,0 ,0,0,0,0,0}, //52
       /*opCondioconal*/    {-46, -200,0,0,0,0,0,0 ,0,0,0,0,0,0 }, //53

       /*TERCondioconal*/   {1027,1031,-200,0,0,0,0,0,0,0,0,0,0,0 }, //54
       /*TERCondioconal*/   {-90,-200,0,0,0,0,0,0,0 ,0,0,0,0,0}, //55

       /*oplogico*/         {-30,-200,0,0,0,0,0,0,0 ,0,0,0,0,0},  //56
       /*oplogico*/         {-31,-200,0,0,0,0,0,0,0,0,0,0,0,0 }, //57

       /*else*/             {-201, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0},  //58
       /*else*/             {-93, 1028, -200 ,0,0,0,0,0 ,0,0,0,0,0,0 }, //59
       /*else1 */           {-65, 1019, -64 ,-200,0,0,0,0 ,0,0,0,0,0,0 }, //60
       /*else */            {1021, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0},  //61

       /*for */             {-65, 1031, -64 ,-63,1037,-68,1022,-68 ,1030, -62, -102,-200, 0 ,0}, //62
       /*metafor*/          {-2, -14,1 ,-200,0,0,0,0 ,0,0,0,0,0,0}, //63

       /*asignacion*/       {1032, -1,-200 ,0,0,0,0,0 ,0,0,0,0,0,0}, //64
       /*incremento*/       {-12, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0}, //65
       /*incremento*/       {-13, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0}, //66

       /*while */           {-65, 1019, -64 ,-63,1022,-62,-104,-200 ,0, 0, 0,0, 0 ,0}, //67
       /*do */              {-68, -63, 1022 ,-62,-104,-65, 1019 ,-64, -105, -200,0, 0,0 ,0}, //68

       /*switch */          {-65, 1036, -64 ,-63,1,-62,-98,-200 ,0, 0, 0,0, 0 ,0}, //69
       /*Casos*/            {-201, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0}, //70
       /*Casos*/            {-1036, 1037, -200 ,0,0,0,0,0 ,0,0,0,0,0,0}, //71
       /*Casos*/            {-1036, 1038, -200 ,0,0,0,0,0 ,0,0,0,0,0,0}, //71

       /*default*/          {-68,1039,1019, -69, -1047, -99,0,0 ,0,0,0,0,0,0}, //72
       /*rb*/               {1040, -107,-200 ,0,0,0,0,0 ,0,0,0,0,0,0}, //73
       /*rb*/               {-100, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0}, //74
       /*ASIG */            {-1, -200,0 ,0,0,0,0,0 ,0,0,0,0,0,0  }, // 75
       /* ASIG */           {1040, -200, 0 ,0,0,0,0,0 ,0,0,0,0,0,0 }, // 76
       /* ASIG */           {-201, -200, 0 ,0,0,0,0,0 ,0,0,0,0,0,0 } // 77 

        };

        #endregion

        #region REPOSITORIO DE REGLAS MAL
        /*
        public int[,] RepositorioReglas = new int[,]
        {

            /*  1. S                   * { 1001,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*  2. SCRIPT              * { 1011,   1002,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*  3. LIBRERIAS           * { 1002,   1003,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*  4. LIBRERIAS           * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },  // lamba
            /*  5. LIB                 * {  -68,   1004,   -120,  -200,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*  6. LIB                 * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },  // lamba
            /*  7. DIRECCION           * {   -4,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*  8. EXP                 * { 1007,   1006,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*  9. EXP                 * {  -63,   1005,    -62,  -200,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 10. FACTOR              * {   -1,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 11. FACTOR              * {   -2,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 12. FACTOR              * {   -3,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 13. FACTOR              * {   -4,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 14. TERMINO             * { 1005,   1008,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 15. TERMINO             * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },  // lamba
            /* 16. OP                  * {   -6,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 17. OP                  * {   -7,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 18. OP                  * {   -8,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 19. OP                  * {   -9,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 20. OP                  * {  -10,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 21. ASIG                * {  -14,     -1,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 22. ASIG                * {  -14,   1005,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 23. ASIG                * {  -14,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },  // lamba
            /* 24. ALCANCE             * {  -76,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 25. ALCANCE             * {  -77,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 26. ALCANCE             * {  -78,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 27. ALCANCE             *{  -79,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 28. ALCANCE             *{ -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },  // lamba
            /* 29. CLASES              * { 1012,   1013,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 30. CLASES_1            * { 1012,   1013,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 31. CLASES_1            * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 32. CLASE               * {  -65,   1015,    -64,  1014,   -1,   -88,  1010,  -200,     0,      0,      0,     0,    0,    0,   0   },
            /* 33. HERENCIA            * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },  // lamba
            /* 34. HERENCIA            * {   -1,    -89,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 35. MIEMBROS            * {  1015,  1016,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 36. MIEMBROS            * {  -201,  -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },  // lamba
            /* 37. MIEMBRO             * { 1017,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 38. METATRIPCON         * { 1018,   1010,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 39. METATRIPCON_1       * {  -65,   1024,    -64,   -84,  -69,   -84,   -69,   -63,  1020,     -62,    -1,  -200,    0,    0,   0   },
            /* 40. METATRIPCON_1       * { 1019,     -1,   1022,   200,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 41. METATRIPCON_2       * {  -68,   1009,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 42. METATRIPCON_2       * {  -65,   1005,   -107,  1024,  -64,   -63,  1020,   -62,  -200,      0,      0,     0,    0,    0,   0   },
            /* 43. PARAMETROS          * { 1021,   1023,    -69,    -1, -200,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 44. PARAMETROS          * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },  // lamba
            /* 45. PARAMETRO           * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },  // lamba
            /* 46. PARAMETRO           * { 1021,   1023,    -69,    -1,  -70,  -200,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 47. VARIABLE            * {  -59,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 48. VARIABLE            * {  -60,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 49. VARIABLE            * {  -61,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 50. TIPO                * {  -72,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 51. TIPO                * {  -73,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 52. TIPO                * {  -74,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 53. SENTENCIAS          * { 1024,   1025,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 54. SENTENCIAS          * {    0,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 55. SENTENCIA           * { 1026,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 56. SENTENCIA           * { 1034,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 57. SENTENCIA           * { 1040,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 58. SENTENCIA           * { 1041,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 59. SENTENCIA           * { 1048,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 60. SENTENCIA           * { 1042,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 61. SENTENCIA           * { 1043,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 62. SENTENCIA           * { 1035,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 63. SENTENCIA           * { 1037,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 64. SENTENCIA           * { 1044,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 65. IF                  * { 1032,    -65,   1024,   -64,  -63,  1027,   -62,   -95,  -200,      0,      0,     0,    0,    0,   0   },
            /* 66. CONDICIONAL         * { 1028,  -1030,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 67. FACTOR_CONDICIONAL  * { -115,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 68. FACTOR_CONDICIONAL  * { -116,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 69. FACTOR_CONDICIONAL  * { 1005,   1029,   1005,  -200,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 70. OP_RELACIONAL       * {  -47,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 71. OP_RELACIONAL       * {  -48,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 72. OP_RELACIONAL       * {  -49,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 73. OP_RELACIONAL       * {  -50,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 74. OP_RELACIONAL       * {  -45,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 75. OP_RELACIONAL       * {  -46,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 76. TERMINO_CONDICIONAL * { 1027,   1031,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 77. TERMINO_CONDICIONAL * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   }, // lamba
            /* 78. OP_LOGICO           * {  -30,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 79. OP_LOGICO           * {  -31,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 80. OP_LOGICO           * {  -32,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 81. ELSE                * { -200,      0,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 82. ELSE                * { 1033,    -93,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 83. ELSE_1              * {  -65,   1024,     64,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 84. ELSE                * { 1026,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 85. FOR                 * {  -65,   1024,    -64,   -63, 1037,   -68,  1037,   -68,  1027,    -68,   1035,   -62, -102, -200,   0   },
            /* 86. DECASIG             * { 1036,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 87. DECASIG             * { 1037,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 88. DECLARACION         * { 1022,   1009,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 89. ASIGNACION          * { 1038,     -1,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 90. INCREMENTO          * { 1039,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 91. INCREMENTO          * {  -12,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 92. INCREMENTO          * {  -13,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 93. OP_ASIGNACION       * {  -15,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 94. OP_ASIGNACION       * {  -16,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 95. OP_ASIGNACION       * {  -17,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 96. OP_ASIGNACION       * {  -18,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /* 97. WHILE               * {  -65,   1024,    -64,   -63, 1027,   -62,  -104,  -200,     0,      0,      0,     0,    0,    0,   0   },
            /* 98. DO                  * {  -68,    -63,   1027,   -62, -104,   -65,  1024,   -64,  -105,   -200,      0,     0,    0,    0,   0   },
            /* 99. LEER                * {  -68,    -63,     -4,   -62, -121,   -71,  -120,  -200,     0,      0,      0,     0,    0,    0,   0   },
            /*100. ESCRIBIR            * {  -68,   1009,   1022,  -200,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*101. INVOCAR             * {  -63,   1046,   -62,   1044,   -1,  -200,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*102. OBJ                 * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   }, // lamba
            /*103. OBJ                 * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   }, // lamba
            /*104. PARAMETRO_OBJ       * { 1047,   1005,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*105. PARAMETRO_OBJ       * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   }, // lamba
            /*106. PARAMETRO_OBJ_1     * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   }, // lamba
            /*107. PARAMETRO_OBJ_1     * {  -70,   1005,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*108. SWITCH              * {  -65,   1049,    -64,   -63,   -1,   -62,   -98,  -200,     0,      0,      0,     0,    0,    0,   0   },
            /*109. CASOS               * { -201,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   }, // lamba
            /*110. CASOS               * { 1049,   1050,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*111. CASOS               * { 1049,   1050,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*112. CASO                * {  -68,   1052,   1024,   -69,  1006,  -99,  -200,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*113. DEFAULT             * {  -68,   1024,   -101,  -200,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*114. RB                  * { 1005,   -107,   -200,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   },
            /*115. RB                  * { -100,   -200,      0,     0,    0,     0,     0,     0,     0,      0,      0,     0,    0,    0,   0   }
        };
        */
        #endregion

        #region CONSTRUCTOR
        public Sintactico(List<Token> listaTokenLexico)
        {
            // Incializando
            listaError = new List<Error>();
            listaTokens = listaTokenLexico;
            listaTokens.Add(new Token() { _Lexema = "$", _Linea = 0, _TipoToken = TipoToken.Cadena, _Token = -200 });

            listaSintactico[0] = -200; // $
            listaSintactico[1] = 1000; // S

            intentosRecuperar = 0;
            tipoRecuperacion = TipoRecuperacion.Ninguna;

            EjecutarSintactico(listaTokens);
        }
        #endregion
        
        #region EJECUTAR SINTACTICO
        public void EjecutarSintactico(List<Token> listaTokens)
        {
            // valores locales
            int renglon, columna = 0;
            int regla;

            do
            {
                // Validacion si el elemento de la lista es terminal
                if (listaSintactico[punteroSintactico] < 0)
                {
                    // Validacion si LAMBDA es terminal
                    if (listaSintactico[punteroSintactico] == -201)
                    {
                        listaSintactico[punteroSintactico] = 0;
                        punteroSintactico--;
                    }

                    // Los dos son iguales?? WTF
                    else if (listaSintactico[punteroSintactico] == listaTokens[punteroLexico]._Token)
                    {
                        // Ambos son $ ?? 
                        if (listaSintactico[punteroSintactico] == -200)
                        {
                            revision = true;
                            if (error)
                                MessageBox.Show(@"Analisis Sintactico Terminado, Con Errores");
                            else
                                MessageBox.Show(@"Analisis Sintactico Terminado Correctamente");
                            break;

                        }
                        else
                        {
                            // MATCH  ELEMENTO
                            listaSintactico[punteroSintactico] = 0;
                            punteroLexico++; 
                             punteroSintactico--;
                            VerificarRecuperacion();
                        }
                    }
                    else
                    {
                        // Lista de tokenks y lista sintactica no son iguales
                        NuevoError(listaTokens, ref revision, 1);
                    }
                }
                else
                {
                    // NUMERO POSITIVO: REGLA DEL REPOSITORIO
                    renglon = BuscarRenglon(listaSintactico[punteroSintactico]);
                    columna = BuscarColumna(listaTokens[punteroLexico]._Token);

                    regla = MatrizSintactica[renglon, columna];
                    if (regla > 0)
                    {
                        // Llamado insersion de reglas
                        InsertarRegla(regla);
                        VerificarRecuperacion();
                    }
                    else
                    {
                        if (intentosRecuperar < 1)
                        {
                            tipoRecuperacion = TipoRecuperacion.Sobra;
                        }
                        NuevoError(listaTokens, ref revision, regla);
                    }
                }

            } while (revision != true);
        }
        #endregion

        #region INSERTAR REGLA
        private void InsertarRegla(int regla)
        {
            int i = 0;

            do
            {
                listaSintactico[punteroSintactico] = RepositorioReglas[regla -1, i];
                punteroSintactico++;
                i++;

            } while (RepositorioReglas[regla - 1, i] != -200);
                    punteroSintactico--;
        }
        #endregion

        #region BUSCAR COLUMNA
        
        private int BuscarColumna(int token)
        {
            
            switch (token)
            {
                case -1:         // ID
                    return 0;
                case -2:         // INT
                    return 1;
                case -3:         // DEC
                    return 2;
                case -4:         // CAD
                    return 3;
                case -6:         // +
                    return 4;
                case -7:         // -
                    return 5;
                case -8:         // *
                    return 6;
                case -9:         // /
                    return 7;
                case -10:        // %
                    return 8;
                case -12:        // ++
                    return 9;
                case -13:        // --
                    return 10;
                case -14:         // =
                    return 11;
                case -15:         // +=
                    return 12;
                case -16:         // -=
                    return 13;
                case -17:         // *=
                    return 14;
                case -18:         // *=
                    return 14;
                case -19:         // /=
                    return 15;
                case -30:         // &&
                    return 17;
                case -31:         // ||
                    return 18;
                case -32:         // !
                    return 19;
                case -33:         // typeof
                    return 20;
                case -34:         // instance
                    return 21;
                case -35:         // &
                    return 22;
                case -36:         // |
                    return 23;
                case -45:         // ==
                    return 24;
                case -46:         // !=
                    return 25;
                case -47:         // >
                    return 26;
                case -48:         // <
                    return 27;
                case -49:         // >=
                    return 28;
                case -50:         // <=
                    return 29;
                case -51:         // ?
                    return 30;
                case -59:         // var
                    return 31;
                case -60:         // let
                    return 32;
                case -61:         // const
                    return 33;
                case -62:         // (
                    return 34;
                case -63:         // )
                    return 34;
                case -64:         // {
                    return 36; 
                case -65:         // }
                    return 37;
                case -66:         // [
                    return 38;
                case -67:         // ]
                    return 39;
                case -68:         // ;
                    return 40;
                case -69:         // :
                    return 41;
                case -70:         // ,
                    return 42;
                case -71:         // .
                    return 43;
                case -72:         // string
                    return 44;
                case -73:         // number
                    return 45;
                case -74:         // boolean
                    return 46;
                case -76:         //static
                    return 47;
                case -77:         // public
                    return 48;
                case -78:         // private
                    return 49;
                case -79:         // protected
                    return 50;
                case -84:         // void
                    return 51;
                case -85:         // interface
                    return 52;
                case -86:         // constructor
                    return 53;
                case -87:         // abstract
                    return 54;
                case -88:         // class
                    return 55;
                case -89:         // extends
                    return 56;
                case -90:         // function
                    return 57;
                case -91:         // prototype
                    return 58;
                case -92:         // length
                    return 59;
                case -93:         // get
                    return 60;   
                case -94:         // set
                    return 61;
                case -95:         // if
                    return 62;
                case -96:         // else
                    return 63;
                case -97:         // switch
                    return 64;
                case -99:         // case
                    return 65;
                case -100:         // break
                    return 66;
                case -101:         // default
                    return 67;
                case -102:         // for
                    return 68;
                case -103:         // in
                    return 69;
                case -104:         // while
                    return 70;
                case -105:         // do
                    return 71;
                case -106:         // continue
                    return 72;
                case -107:         // return
                    return 73;
                case -108:         // this
                    return 74;
                case -109:         // super
                    return 75;
                case -110:         // new
                    return 76;
                case -111:         // try
                    return 77;
                case -112:         // catch
                    return 78;
                case -113:         // finally
                    return 79;
                case -114:          // throw
                    return 80;
                case -115:         // true
                    return 81;
                case -116:         // false
                    return 82;
                case -117:         // null
                    return 83;
                case -118:         // undefined
                    return 84;
                case -119:         // import
                    return 85;
                case -120:         // console
                    return 86;
                case -121:         // log
                    return 87;
                case -200:         // $
                    return 88;
            
                default:
                    throw new Exception("Error de logica");


            }
        }
        

        private int BuscarColumna2(int token)
        {
            switch (token)
            {
                case -1: /*id*/
                    return 0;
                case -2: /*ent*/
                    return 1;
                case -3: /*dec*/
                    return 2;

                case -4: /*cadena*/
                    return 3;
                case -71:    /* . */
                    return 43;
                case -68: /*;*/
                    return 40;

                case -89: /*extends*/
                    return 56;
                case -64: /*{*/
                    return 36;

                case -65: /*}*/
                    return 37;

                case -88: /*class*/
                    return 55;
                case -119: /*import*/
                    return  85;

                case -77: /*public*/
                    return 48;
                case -78: /*private*/
                    return 49;

                case -79: /*protected*/
                    return 50;
                case -76: /*static*/
                    return 47;
               
                case -200: /*$*/
                    return 88;
                default:
                    return 48;


            }
        }
        #endregion

        #region BUSCAR RENGLON
        
        private int BuscarRenglon(int regla)
        {
            switch (regla)
            { 
                 case 1000:    //  0. S                    *
                    return 0;
                case 1001:     //  1. SCRIPT              *
                    return 1;
                case 1002:     //  2. LIBRERIAS           *
                    return 2;  
                case 1003:     //  3. LIB                 *
                    return 3;
                case 1004:     //  4. lib1          *
                    return 4;  
                case 1005:     //  5. CLASES                 *
                    return 5;
                case 1006:     //  6. CLASES_1             *
                    return 6;
                case 1007:     //  7. CLASE            *
                    return 7;
                case 1008:     //  8. HERENCIA              *
                    return 8;
                case 1009:     //  9. ALCANCE                *
                    return 9;
                case 1010:     // 10. MIEMBROS             *
                    return 10;
                case 1011:     // 11. MIEMBRO              *
                    return 11;
                case 1012:     // 12.  PARAM           *
                    return 12;
                case 1013:     // 13. PARAMETRO              *
                    return 13;
                case 1014:     // 14. PARAMETRO 1           *
                    return 14;
                case 1015:     // 15. METATRIPCON            *
                    return 15;
                case 1016:     // 16. METATRIPCON 1             *
                    return 16;
                case 1017:     // 17. RETORNO       *
                    return 17;
                case 1018:     // 18. TIPO       *
                    return 18;
                case 1019:     // 19. SENTECIAS        *
                    return 19;
                case 1020:     // 20. SENTENCIA          *
                    return 20;
                case 1021:     // 21. IF           *
                    return 21; 
                case 1022:     // 22. CONDICIONAL            *
                    return 22;
                case 1023:     // 23. FACTOR_CONDICIONAL                *
                    return 23;
                case 1024:     // 24. OP_RALACIONAL          *
                    return 24;
                case 1025:     // 25. TERMINO _CONDICIONAL       *
                    return 25;
                case 1026:     // 26.  OP_LOGICO                  *
                    return 26;
                case 1027:     // 27. ELSE         *
                    return 27;
                case 1028:     // 28. ELSE_1  *
                    return 28;
                case 1029:     // 29. FOR       *
                    return 29;
                case 1030:     // 30. METAFOR *
                    return 30;
                case 1031:     // 31.ASIGNACION           *
                    return 31;
                case 1032:     // 32. INCREMENTO           *
                    return 32;
                case 1033:     // 33. WHILE          *
                    return 33;
                case 1034:     // 34. DO               *
                    return 34;
                case 1035:     // 35. SWITCH             *
                    return 35;
                case 1036:     // 36. CASOS         *
                    return 36; 
                case 1037:     // 37. CASO          *
                    return 37;
                case 1038:     // 38. DEFAULT          *
                    return 38;
                case 1039:     // 39. RB       *
                    return 39; 
                case 1040:     // 40. EXP               *
                    return 40;
                case 1041:     // 41. FACTOR                 *
                    return 41;
                case 1042:     // 42. OP                *
                    return 42;
                case 1043:     // 43. ASIG1            *
                    return 43;

                default:
                    throw new Exception("Error de logica");
                    
            }
        }
        #endregion

     
        #region VERIFICACION DE ERRORES

        /// <summary>
        /// NUEVO ERROR
        /// </summary>
        /// <param name="listaTokens"></param>
        /// <param name="revision"></param>
        /// <param name="tipo"></param>
        public void NuevoError(List<Token> listaTokens, ref bool revision, int tipo)
        {
            error = true;
            var nuevoError = ManejoErrores(tipo, listaTokens[punteroLexico]._Linea);
            listaError.Add(nuevoError);

            Recuperar(ref revision, ref tipoRecuperacion);
        }


        /// <summary>
        ///  VERIFAR RECUPERACION
        /// </summary>
        private void VerificarRecuperacion()
        {
            if(tipoRecuperacion != TipoRecuperacion.Ninguna)
            {
                tipoRecuperacion = TipoRecuperacion.Ninguna;
                intentosRecuperar = 0;
            }
        }


        /// <summary>
        ///  MANEJO DE ERRORES
        /// </summary>
        /// <param name="error"></param>
        /// <param name="linea"></param>
        /// <returns></returns>
        private Error ManejoErrores(int error, int linea)
        {
            string mensajeError = "";
            switch (error)
            {
                case 1:  // cuando son terminales 
                    mensajeError = "se esperaba el simbolo: " + listaSintactico[punteroSintactico];
                    break;
                case -600:
                    mensajeError = "se esperaba una estructura de clase o librería.";
                    break;
                case -601:
                    mensajeError = "se esperaba una estructura de librería. ";
                    break;
                case -602:
                    mensajeError = "se esperaba una estructura de herencia ";
                    break;
                case -603:
                    mensajeError = "se esperaba un miembro de una clase ";
                    break;
                case -604:
                    mensajeError = "se esperaba una estructura de clase ";
                    break;
                case -605:
                    mensajeError = "se esperaba un Alcance ";
                    break;
                case -606:
                    mensajeError = "Se epsf";
                    break;

                default:
                    break;
            }
            return new Error() { codigo = error, mensajeError = mensajeError, tipo = tipoError.Sintactico, Linea = linea };

        }



        /// <summary>
        ///  RECUPERAR
        /// </summary>
        /// <param name="revision"></param>
        /// <param name="tipo"></param>
        private void Recuperar(ref bool revision, ref TipoRecuperacion tipo)
        {
            if (intentosRecuperar > 3)
            {
                tipo = TipoRecuperacion.NoMas;
            }

            intentosRecuperar++;

            switch (tipo)
            {
                case TipoRecuperacion.Ninguna:
                    punteroSintactico--;
                    tipo++;
                    break;
                case TipoRecuperacion.Falta:
                    punteroSintactico--;  // muevo sintactio
                    if (intentosRecuperar == 3)
                    {
                        punteroSintactico += 3;
                        tipo = TipoRecuperacion.Diferentes;
                    }
                    break;
                case TipoRecuperacion.Sobra:
                    if (intentosRecuperar == 3)
                    {
                        punteroLexico -= 2;
                        tipo = TipoRecuperacion.Falta;
                    }
                    punteroLexico++;  // muevo lexico
                    break;
                case TipoRecuperacion.Diferentes:
                    punteroLexico++;   // muevo ambos
                    punteroSintactico--;
                    break;

                default:
                    revision = true;
                    MessageBox.Show(@"Analisis Sintactico no se recupero, paro fulminante");
                    break;
            }
        }
    }

    #endregion
}

